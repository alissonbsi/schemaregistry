/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cardif.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Risk extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6040945838594344722L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Risk\",\"namespace\":\"com.cardif.avro\",\"fields\":[{\"name\":\"RiskId\",\"type\":\"long\"},{\"name\":\"RiskDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"coverages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coverage\",\"fields\":[{\"name\":\"coverageId\",\"type\":\"long\"},{\"name\":\"coverageDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"isBasicRisk\",\"type\":\"boolean\",\"default\":false},{\"name\":\"maxIndemnity\",\"type\":\"float\"},{\"name\":\"plans\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Plan\",\"fields\":[{\"name\":\"planId\",\"type\":\"long\"},{\"name\":\"planDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valuePremium\",\"type\":[\"null\",\"double\"]},{\"name\":\"factorPremium\",\"type\":[\"null\",\"double\"]}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Risk> ENCODER =
      new BinaryMessageEncoder<Risk>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Risk> DECODER =
      new BinaryMessageDecoder<Risk>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Risk> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Risk> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Risk> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Risk>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Risk to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Risk from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Risk instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Risk fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long RiskId;
   private java.lang.String RiskDescription;
   private java.util.List<com.cardif.avro.Coverage> coverages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Risk() {}

  /**
   * All-args constructor.
   * @param RiskId The new value for RiskId
   * @param RiskDescription The new value for RiskDescription
   * @param coverages The new value for coverages
   */
  public Risk(java.lang.Long RiskId, java.lang.String RiskDescription, java.util.List<com.cardif.avro.Coverage> coverages) {
    this.RiskId = RiskId;
    this.RiskDescription = RiskDescription;
    this.coverages = coverages;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return RiskId;
    case 1: return RiskDescription;
    case 2: return coverages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: RiskId = (java.lang.Long)value$; break;
    case 1: RiskDescription = value$ != null ? value$.toString() : null; break;
    case 2: coverages = (java.util.List<com.cardif.avro.Coverage>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'RiskId' field.
   * @return The value of the 'RiskId' field.
   */
  public long getRiskId() {
    return RiskId;
  }



  /**
   * Gets the value of the 'RiskDescription' field.
   * @return The value of the 'RiskDescription' field.
   */
  public java.lang.String getRiskDescription() {
    return RiskDescription;
  }



  /**
   * Gets the value of the 'coverages' field.
   * @return The value of the 'coverages' field.
   */
  public java.util.List<com.cardif.avro.Coverage> getCoverages() {
    return coverages;
  }



  /**
   * Creates a new Risk RecordBuilder.
   * @return A new Risk RecordBuilder
   */
  public static com.cardif.avro.Risk.Builder newBuilder() {
    return new com.cardif.avro.Risk.Builder();
  }

  /**
   * Creates a new Risk RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Risk RecordBuilder
   */
  public static com.cardif.avro.Risk.Builder newBuilder(com.cardif.avro.Risk.Builder other) {
    if (other == null) {
      return new com.cardif.avro.Risk.Builder();
    } else {
      return new com.cardif.avro.Risk.Builder(other);
    }
  }

  /**
   * Creates a new Risk RecordBuilder by copying an existing Risk instance.
   * @param other The existing instance to copy.
   * @return A new Risk RecordBuilder
   */
  public static com.cardif.avro.Risk.Builder newBuilder(com.cardif.avro.Risk other) {
    if (other == null) {
      return new com.cardif.avro.Risk.Builder();
    } else {
      return new com.cardif.avro.Risk.Builder(other);
    }
  }

  /**
   * RecordBuilder for Risk instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Risk>
    implements org.apache.avro.data.RecordBuilder<Risk> {

    private long RiskId;
    private java.lang.String RiskDescription;
    private java.util.List<com.cardif.avro.Coverage> coverages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cardif.avro.Risk.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.RiskId)) {
        this.RiskId = data().deepCopy(fields()[0].schema(), other.RiskId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.RiskDescription)) {
        this.RiskDescription = data().deepCopy(fields()[1].schema(), other.RiskDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.coverages)) {
        this.coverages = data().deepCopy(fields()[2].schema(), other.coverages);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Risk instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cardif.avro.Risk other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.RiskId)) {
        this.RiskId = data().deepCopy(fields()[0].schema(), other.RiskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.RiskDescription)) {
        this.RiskDescription = data().deepCopy(fields()[1].schema(), other.RiskDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coverages)) {
        this.coverages = data().deepCopy(fields()[2].schema(), other.coverages);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'RiskId' field.
      * @return The value.
      */
    public long getRiskId() {
      return RiskId;
    }


    /**
      * Sets the value of the 'RiskId' field.
      * @param value The value of 'RiskId'.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder setRiskId(long value) {
      validate(fields()[0], value);
      this.RiskId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'RiskId' field has been set.
      * @return True if the 'RiskId' field has been set, false otherwise.
      */
    public boolean hasRiskId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'RiskId' field.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder clearRiskId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'RiskDescription' field.
      * @return The value.
      */
    public java.lang.String getRiskDescription() {
      return RiskDescription;
    }


    /**
      * Sets the value of the 'RiskDescription' field.
      * @param value The value of 'RiskDescription'.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder setRiskDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.RiskDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'RiskDescription' field has been set.
      * @return True if the 'RiskDescription' field has been set, false otherwise.
      */
    public boolean hasRiskDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'RiskDescription' field.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder clearRiskDescription() {
      RiskDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverages' field.
      * @return The value.
      */
    public java.util.List<com.cardif.avro.Coverage> getCoverages() {
      return coverages;
    }


    /**
      * Sets the value of the 'coverages' field.
      * @param value The value of 'coverages'.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder setCoverages(java.util.List<com.cardif.avro.Coverage> value) {
      validate(fields()[2], value);
      this.coverages = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'coverages' field has been set.
      * @return True if the 'coverages' field has been set, false otherwise.
      */
    public boolean hasCoverages() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'coverages' field.
      * @return This builder.
      */
    public com.cardif.avro.Risk.Builder clearCoverages() {
      coverages = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Risk build() {
      try {
        Risk record = new Risk();
        record.RiskId = fieldSetFlags()[0] ? this.RiskId : (java.lang.Long) defaultValue(fields()[0]);
        record.RiskDescription = fieldSetFlags()[1] ? this.RiskDescription : (java.lang.String) defaultValue(fields()[1]);
        record.coverages = fieldSetFlags()[2] ? this.coverages : (java.util.List<com.cardif.avro.Coverage>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Risk>
    WRITER$ = (org.apache.avro.io.DatumWriter<Risk>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Risk>
    READER$ = (org.apache.avro.io.DatumReader<Risk>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.RiskId);

    out.writeString(this.RiskDescription);

    long size0 = this.coverages.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.cardif.avro.Coverage e0: this.coverages) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.RiskId = in.readLong();

      this.RiskDescription = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.cardif.avro.Coverage> a0 = this.coverages;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.cardif.avro.Coverage>((int)size0, SCHEMA$.getField("coverages").schema());
        this.coverages = a0;
      } else a0.clear();
      SpecificData.Array<com.cardif.avro.Coverage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.cardif.avro.Coverage>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.cardif.avro.Coverage e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.cardif.avro.Coverage();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.RiskId = in.readLong();
          break;

        case 1:
          this.RiskDescription = in.readString();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<com.cardif.avro.Coverage> a0 = this.coverages;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.cardif.avro.Coverage>((int)size0, SCHEMA$.getField("coverages").schema());
            this.coverages = a0;
          } else a0.clear();
          SpecificData.Array<com.cardif.avro.Coverage> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.cardif.avro.Coverage>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.cardif.avro.Coverage e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.cardif.avro.Coverage();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










