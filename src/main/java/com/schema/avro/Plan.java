/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Plan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1261949396228295863L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Plan\",\"namespace\":\"com.schema.avro\",\"fields\":[{\"name\":\"planId\",\"type\":\"long\"},{\"name\":\"planDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valuePremium\",\"type\":[\"null\",\"double\"]},{\"name\":\"factorPremium\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Plan> ENCODER =
      new BinaryMessageEncoder<Plan>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Plan> DECODER =
      new BinaryMessageDecoder<Plan>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Plan> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Plan> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Plan> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Plan>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Plan to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Plan from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Plan instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Plan fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long planId;
   private java.lang.String planDescription;
   private java.lang.Double valuePremium;
   private java.lang.Double factorPremium;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Plan() {}

  /**
   * All-args constructor.
   * @param planId The new value for planId
   * @param planDescription The new value for planDescription
   * @param valuePremium The new value for valuePremium
   * @param factorPremium The new value for factorPremium
   */
  public Plan(java.lang.Long planId, java.lang.String planDescription, java.lang.Double valuePremium, java.lang.Double factorPremium) {
    this.planId = planId;
    this.planDescription = planDescription;
    this.valuePremium = valuePremium;
    this.factorPremium = factorPremium;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return planId;
    case 1: return planDescription;
    case 2: return valuePremium;
    case 3: return factorPremium;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: planId = (java.lang.Long)value$; break;
    case 1: planDescription = value$ != null ? value$.toString() : null; break;
    case 2: valuePremium = (java.lang.Double)value$; break;
    case 3: factorPremium = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'planId' field.
   * @return The value of the 'planId' field.
   */
  public long getPlanId() {
    return planId;
  }



  /**
   * Gets the value of the 'planDescription' field.
   * @return The value of the 'planDescription' field.
   */
  public java.lang.String getPlanDescription() {
    return planDescription;
  }



  /**
   * Gets the value of the 'valuePremium' field.
   * @return The value of the 'valuePremium' field.
   */
  public java.lang.Double getValuePremium() {
    return valuePremium;
  }



  /**
   * Gets the value of the 'factorPremium' field.
   * @return The value of the 'factorPremium' field.
   */
  public java.lang.Double getFactorPremium() {
    return factorPremium;
  }



  /**
   * Creates a new Plan RecordBuilder.
   * @return A new Plan RecordBuilder
   */
  public static com.schema.avro.Plan.Builder newBuilder() {
    return new com.schema.avro.Plan.Builder();
  }

  /**
   * Creates a new Plan RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Plan RecordBuilder
   */
  public static com.schema.avro.Plan.Builder newBuilder(com.schema.avro.Plan.Builder other) {
    if (other == null) {
      return new com.schema.avro.Plan.Builder();
    } else {
      return new com.schema.avro.Plan.Builder(other);
    }
  }

  /**
   * Creates a new Plan RecordBuilder by copying an existing Plan instance.
   * @param other The existing instance to copy.
   * @return A new Plan RecordBuilder
   */
  public static com.schema.avro.Plan.Builder newBuilder(com.schema.avro.Plan other) {
    if (other == null) {
      return new com.schema.avro.Plan.Builder();
    } else {
      return new com.schema.avro.Plan.Builder(other);
    }
  }

  /**
   * RecordBuilder for Plan instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Plan>
    implements org.apache.avro.data.RecordBuilder<Plan> {

    private long planId;
    private java.lang.String planDescription;
    private java.lang.Double valuePremium;
    private java.lang.Double factorPremium;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.schema.avro.Plan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.planId)) {
        this.planId = data().deepCopy(fields()[0].schema(), other.planId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.planDescription)) {
        this.planDescription = data().deepCopy(fields()[1].schema(), other.planDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.valuePremium)) {
        this.valuePremium = data().deepCopy(fields()[2].schema(), other.valuePremium);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.factorPremium)) {
        this.factorPremium = data().deepCopy(fields()[3].schema(), other.factorPremium);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Plan instance
     * @param other The existing instance to copy.
     */
    private Builder(com.schema.avro.Plan other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.planId)) {
        this.planId = data().deepCopy(fields()[0].schema(), other.planId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.planDescription)) {
        this.planDescription = data().deepCopy(fields()[1].schema(), other.planDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.valuePremium)) {
        this.valuePremium = data().deepCopy(fields()[2].schema(), other.valuePremium);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.factorPremium)) {
        this.factorPremium = data().deepCopy(fields()[3].schema(), other.factorPremium);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'planId' field.
      * @return The value.
      */
    public long getPlanId() {
      return planId;
    }


    /**
      * Sets the value of the 'planId' field.
      * @param value The value of 'planId'.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder setPlanId(long value) {
      validate(fields()[0], value);
      this.planId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'planId' field has been set.
      * @return True if the 'planId' field has been set, false otherwise.
      */
    public boolean hasPlanId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'planId' field.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder clearPlanId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'planDescription' field.
      * @return The value.
      */
    public java.lang.String getPlanDescription() {
      return planDescription;
    }


    /**
      * Sets the value of the 'planDescription' field.
      * @param value The value of 'planDescription'.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder setPlanDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.planDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'planDescription' field has been set.
      * @return True if the 'planDescription' field has been set, false otherwise.
      */
    public boolean hasPlanDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'planDescription' field.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder clearPlanDescription() {
      planDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'valuePremium' field.
      * @return The value.
      */
    public java.lang.Double getValuePremium() {
      return valuePremium;
    }


    /**
      * Sets the value of the 'valuePremium' field.
      * @param value The value of 'valuePremium'.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder setValuePremium(java.lang.Double value) {
      validate(fields()[2], value);
      this.valuePremium = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'valuePremium' field has been set.
      * @return True if the 'valuePremium' field has been set, false otherwise.
      */
    public boolean hasValuePremium() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'valuePremium' field.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder clearValuePremium() {
      valuePremium = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'factorPremium' field.
      * @return The value.
      */
    public java.lang.Double getFactorPremium() {
      return factorPremium;
    }


    /**
      * Sets the value of the 'factorPremium' field.
      * @param value The value of 'factorPremium'.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder setFactorPremium(java.lang.Double value) {
      validate(fields()[3], value);
      this.factorPremium = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'factorPremium' field has been set.
      * @return True if the 'factorPremium' field has been set, false otherwise.
      */
    public boolean hasFactorPremium() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'factorPremium' field.
      * @return This builder.
      */
    public com.schema.avro.Plan.Builder clearFactorPremium() {
      factorPremium = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Plan build() {
      try {
        Plan record = new Plan();
        record.planId = fieldSetFlags()[0] ? this.planId : (java.lang.Long) defaultValue(fields()[0]);
        record.planDescription = fieldSetFlags()[1] ? this.planDescription : (java.lang.String) defaultValue(fields()[1]);
        record.valuePremium = fieldSetFlags()[2] ? this.valuePremium : (java.lang.Double) defaultValue(fields()[2]);
        record.factorPremium = fieldSetFlags()[3] ? this.factorPremium : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Plan>
    WRITER$ = (org.apache.avro.io.DatumWriter<Plan>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Plan>
    READER$ = (org.apache.avro.io.DatumReader<Plan>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.planId);

    out.writeString(this.planDescription);

    if (this.valuePremium == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.valuePremium);
    }

    if (this.factorPremium == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.factorPremium);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.planId = in.readLong();

      this.planDescription = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.valuePremium = null;
      } else {
        this.valuePremium = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.factorPremium = null;
      } else {
        this.factorPremium = in.readDouble();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.planId = in.readLong();
          break;

        case 1:
          this.planDescription = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.valuePremium = null;
          } else {
            this.valuePremium = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.factorPremium = null;
          } else {
            this.factorPremium = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










