/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.schema.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Group extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2548268617576648661L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Group\",\"namespace\":\"com.schema.avro\",\"fields\":[{\"name\":\"groupId\",\"type\":\"int\"},{\"name\":\"groupDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lineBusiness\",\"type\":{\"type\":\"record\",\"name\":\"LineBusiness\",\"fields\":[{\"name\":\"lineBusinessId\",\"type\":\"int\"},{\"name\":\"lineBusinessName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Group> ENCODER =
      new BinaryMessageEncoder<Group>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Group> DECODER =
      new BinaryMessageDecoder<Group>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Group> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Group> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Group> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Group>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Group to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Group from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Group instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Group fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int groupId;
   private java.lang.String groupDescription;
   private com.schema.avro.LineBusiness lineBusiness;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Group() {}

  /**
   * All-args constructor.
   * @param groupId The new value for groupId
   * @param groupDescription The new value for groupDescription
   * @param lineBusiness The new value for lineBusiness
   */
  public Group(java.lang.Integer groupId, java.lang.String groupDescription, com.schema.avro.LineBusiness lineBusiness) {
    this.groupId = groupId;
    this.groupDescription = groupDescription;
    this.lineBusiness = lineBusiness;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return groupId;
    case 1: return groupDescription;
    case 2: return lineBusiness;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: groupId = (java.lang.Integer)value$; break;
    case 1: groupDescription = value$ != null ? value$.toString() : null; break;
    case 2: lineBusiness = (com.schema.avro.LineBusiness)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'groupId' field.
   * @return The value of the 'groupId' field.
   */
  public int getGroupId() {
    return groupId;
  }



  /**
   * Gets the value of the 'groupDescription' field.
   * @return The value of the 'groupDescription' field.
   */
  public java.lang.String getGroupDescription() {
    return groupDescription;
  }



  /**
   * Gets the value of the 'lineBusiness' field.
   * @return The value of the 'lineBusiness' field.
   */
  public com.schema.avro.LineBusiness getLineBusiness() {
    return lineBusiness;
  }



  /**
   * Creates a new Group RecordBuilder.
   * @return A new Group RecordBuilder
   */
  public static com.schema.avro.Group.Builder newBuilder() {
    return new com.schema.avro.Group.Builder();
  }

  /**
   * Creates a new Group RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Group RecordBuilder
   */
  public static com.schema.avro.Group.Builder newBuilder(com.schema.avro.Group.Builder other) {
    if (other == null) {
      return new com.schema.avro.Group.Builder();
    } else {
      return new com.schema.avro.Group.Builder(other);
    }
  }

  /**
   * Creates a new Group RecordBuilder by copying an existing Group instance.
   * @param other The existing instance to copy.
   * @return A new Group RecordBuilder
   */
  public static com.schema.avro.Group.Builder newBuilder(com.schema.avro.Group other) {
    if (other == null) {
      return new com.schema.avro.Group.Builder();
    } else {
      return new com.schema.avro.Group.Builder(other);
    }
  }

  /**
   * RecordBuilder for Group instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Group>
    implements org.apache.avro.data.RecordBuilder<Group> {

    private int groupId;
    private java.lang.String groupDescription;
    private com.schema.avro.LineBusiness lineBusiness;
    private com.schema.avro.LineBusiness.Builder lineBusinessBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.schema.avro.Group.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.groupId)) {
        this.groupId = data().deepCopy(fields()[0].schema(), other.groupId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.groupDescription)) {
        this.groupDescription = data().deepCopy(fields()[1].schema(), other.groupDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lineBusiness)) {
        this.lineBusiness = data().deepCopy(fields()[2].schema(), other.lineBusiness);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasLineBusinessBuilder()) {
        this.lineBusinessBuilder = com.schema.avro.LineBusiness.newBuilder(other.getLineBusinessBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Group instance
     * @param other The existing instance to copy.
     */
    private Builder(com.schema.avro.Group other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.groupId)) {
        this.groupId = data().deepCopy(fields()[0].schema(), other.groupId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groupDescription)) {
        this.groupDescription = data().deepCopy(fields()[1].schema(), other.groupDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lineBusiness)) {
        this.lineBusiness = data().deepCopy(fields()[2].schema(), other.lineBusiness);
        fieldSetFlags()[2] = true;
      }
      this.lineBusinessBuilder = null;
    }

    /**
      * Gets the value of the 'groupId' field.
      * @return The value.
      */
    public int getGroupId() {
      return groupId;
    }


    /**
      * Sets the value of the 'groupId' field.
      * @param value The value of 'groupId'.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder setGroupId(int value) {
      validate(fields()[0], value);
      this.groupId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'groupId' field has been set.
      * @return True if the 'groupId' field has been set, false otherwise.
      */
    public boolean hasGroupId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'groupId' field.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder clearGroupId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupDescription' field.
      * @return The value.
      */
    public java.lang.String getGroupDescription() {
      return groupDescription;
    }


    /**
      * Sets the value of the 'groupDescription' field.
      * @param value The value of 'groupDescription'.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder setGroupDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.groupDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'groupDescription' field has been set.
      * @return True if the 'groupDescription' field has been set, false otherwise.
      */
    public boolean hasGroupDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'groupDescription' field.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder clearGroupDescription() {
      groupDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineBusiness' field.
      * @return The value.
      */
    public com.schema.avro.LineBusiness getLineBusiness() {
      return lineBusiness;
    }


    /**
      * Sets the value of the 'lineBusiness' field.
      * @param value The value of 'lineBusiness'.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder setLineBusiness(com.schema.avro.LineBusiness value) {
      validate(fields()[2], value);
      this.lineBusinessBuilder = null;
      this.lineBusiness = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lineBusiness' field has been set.
      * @return True if the 'lineBusiness' field has been set, false otherwise.
      */
    public boolean hasLineBusiness() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'lineBusiness' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.schema.avro.LineBusiness.Builder getLineBusinessBuilder() {
      if (lineBusinessBuilder == null) {
        if (hasLineBusiness()) {
          setLineBusinessBuilder(com.schema.avro.LineBusiness.newBuilder(lineBusiness));
        } else {
          setLineBusinessBuilder(com.schema.avro.LineBusiness.newBuilder());
        }
      }
      return lineBusinessBuilder;
    }

    /**
     * Sets the Builder instance for the 'lineBusiness' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.schema.avro.Group.Builder setLineBusinessBuilder(com.schema.avro.LineBusiness.Builder value) {
      clearLineBusiness();
      lineBusinessBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lineBusiness' field has an active Builder instance
     * @return True if the 'lineBusiness' field has an active Builder instance
     */
    public boolean hasLineBusinessBuilder() {
      return lineBusinessBuilder != null;
    }

    /**
      * Clears the value of the 'lineBusiness' field.
      * @return This builder.
      */
    public com.schema.avro.Group.Builder clearLineBusiness() {
      lineBusiness = null;
      lineBusinessBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Group build() {
      try {
        Group record = new Group();
        record.groupId = fieldSetFlags()[0] ? this.groupId : (java.lang.Integer) defaultValue(fields()[0]);
        record.groupDescription = fieldSetFlags()[1] ? this.groupDescription : (java.lang.String) defaultValue(fields()[1]);
        if (lineBusinessBuilder != null) {
          try {
            record.lineBusiness = this.lineBusinessBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("lineBusiness"));
            throw e;
          }
        } else {
          record.lineBusiness = fieldSetFlags()[2] ? this.lineBusiness : (com.schema.avro.LineBusiness) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Group>
    WRITER$ = (org.apache.avro.io.DatumWriter<Group>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Group>
    READER$ = (org.apache.avro.io.DatumReader<Group>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.groupId);

    out.writeString(this.groupDescription);

    this.lineBusiness.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.groupId = in.readInt();

      this.groupDescription = in.readString();

      if (this.lineBusiness == null) {
        this.lineBusiness = new com.schema.avro.LineBusiness();
      }
      this.lineBusiness.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.groupId = in.readInt();
          break;

        case 1:
          this.groupDescription = in.readString();
          break;

        case 2:
          if (this.lineBusiness == null) {
            this.lineBusiness = new com.schema.avro.LineBusiness();
          }
          this.lineBusiness.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










